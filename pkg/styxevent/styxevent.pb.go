// Code generated by protoc-gen-go. DO NOT EDIT.
// source: styxevent.proto

package styxevent

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Ack struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_styxevent_afca33e29db050af, []int{0}
}
func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (dst *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(dst, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SearchFileInfo struct {
	Jid                  string   `protobuf:"bytes,1,opt,name=jid,proto3" json:"jid,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Filename             string   `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	Directory            string   `protobuf:"bytes,4,opt,name=directory,proto3" json:"directory,omitempty"`
	Server               string   `protobuf:"bytes,5,opt,name=server,proto3" json:"server,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchFileInfo) Reset()         { *m = SearchFileInfo{} }
func (m *SearchFileInfo) String() string { return proto.CompactTextString(m) }
func (*SearchFileInfo) ProtoMessage()    {}
func (*SearchFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_styxevent_afca33e29db050af, []int{1}
}
func (m *SearchFileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchFileInfo.Unmarshal(m, b)
}
func (m *SearchFileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchFileInfo.Marshal(b, m, deterministic)
}
func (dst *SearchFileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchFileInfo.Merge(dst, src)
}
func (m *SearchFileInfo) XXX_Size() int {
	return xxx_messageInfo_SearchFileInfo.Size(m)
}
func (m *SearchFileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchFileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SearchFileInfo proto.InternalMessageInfo

func (m *SearchFileInfo) GetJid() string {
	if m != nil {
		return m.Jid
	}
	return ""
}

func (m *SearchFileInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SearchFileInfo) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *SearchFileInfo) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

func (m *SearchFileInfo) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

type FoundFile struct {
	Jid                  string   `protobuf:"bytes,1,opt,name=jid,proto3" json:"jid,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Match                string   `protobuf:"bytes,3,opt,name=match,proto3" json:"match,omitempty"`
	Regmatch             string   `protobuf:"bytes,4,opt,name=regmatch,proto3" json:"regmatch,omitempty"`
	Error                string   `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FoundFile) Reset()         { *m = FoundFile{} }
func (m *FoundFile) String() string { return proto.CompactTextString(m) }
func (*FoundFile) ProtoMessage()    {}
func (*FoundFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_styxevent_afca33e29db050af, []int{2}
}
func (m *FoundFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FoundFile.Unmarshal(m, b)
}
func (m *FoundFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FoundFile.Marshal(b, m, deterministic)
}
func (dst *FoundFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FoundFile.Merge(dst, src)
}
func (m *FoundFile) XXX_Size() int {
	return xxx_messageInfo_FoundFile.Size(m)
}
func (m *FoundFile) XXX_DiscardUnknown() {
	xxx_messageInfo_FoundFile.DiscardUnknown(m)
}

var xxx_messageInfo_FoundFile proto.InternalMessageInfo

func (m *FoundFile) GetJid() string {
	if m != nil {
		return m.Jid
	}
	return ""
}

func (m *FoundFile) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *FoundFile) GetMatch() string {
	if m != nil {
		return m.Match
	}
	return ""
}

func (m *FoundFile) GetRegmatch() string {
	if m != nil {
		return m.Regmatch
	}
	return ""
}

func (m *FoundFile) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*Ack)(nil), "styxevent.Ack")
	proto.RegisterType((*SearchFileInfo)(nil), "styxevent.SearchFileInfo")
	proto.RegisterType((*FoundFile)(nil), "styxevent.FoundFile")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileHandlingClient is the client API for FileHandling service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileHandlingClient interface {
	FileSearch(ctx context.Context, in *SearchFileInfo, opts ...grpc.CallOption) (*FoundFile, error)
	FileSearchStream(ctx context.Context, opts ...grpc.CallOption) (FileHandling_FileSearchStreamClient, error)
}

type fileHandlingClient struct {
	cc *grpc.ClientConn
}

func NewFileHandlingClient(cc *grpc.ClientConn) FileHandlingClient {
	return &fileHandlingClient{cc}
}

func (c *fileHandlingClient) FileSearch(ctx context.Context, in *SearchFileInfo, opts ...grpc.CallOption) (*FoundFile, error) {
	out := new(FoundFile)
	err := c.cc.Invoke(ctx, "/styxevent.FileHandling/FileSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileHandlingClient) FileSearchStream(ctx context.Context, opts ...grpc.CallOption) (FileHandling_FileSearchStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileHandling_serviceDesc.Streams[0], "/styxevent.FileHandling/FileSearchStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileHandlingFileSearchStreamClient{stream}
	return x, nil
}

type FileHandling_FileSearchStreamClient interface {
	Send(*SearchFileInfo) error
	Recv() (*FoundFile, error)
	grpc.ClientStream
}

type fileHandlingFileSearchStreamClient struct {
	grpc.ClientStream
}

func (x *fileHandlingFileSearchStreamClient) Send(m *SearchFileInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileHandlingFileSearchStreamClient) Recv() (*FoundFile, error) {
	m := new(FoundFile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileHandlingServer is the server API for FileHandling service.
type FileHandlingServer interface {
	FileSearch(context.Context, *SearchFileInfo) (*FoundFile, error)
	FileSearchStream(FileHandling_FileSearchStreamServer) error
}

func RegisterFileHandlingServer(s *grpc.Server, srv FileHandlingServer) {
	s.RegisterService(&_FileHandling_serviceDesc, srv)
}

func _FileHandling_FileSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileHandlingServer).FileSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/styxevent.FileHandling/FileSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileHandlingServer).FileSearch(ctx, req.(*SearchFileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileHandling_FileSearchStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileHandlingServer).FileSearchStream(&fileHandlingFileSearchStreamServer{stream})
}

type FileHandling_FileSearchStreamServer interface {
	Send(*FoundFile) error
	Recv() (*SearchFileInfo, error)
	grpc.ServerStream
}

type fileHandlingFileSearchStreamServer struct {
	grpc.ServerStream
}

func (x *fileHandlingFileSearchStreamServer) Send(m *FoundFile) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileHandlingFileSearchStreamServer) Recv() (*SearchFileInfo, error) {
	m := new(SearchFileInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FileHandling_serviceDesc = grpc.ServiceDesc{
	ServiceName: "styxevent.FileHandling",
	HandlerType: (*FileHandlingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FileSearch",
			Handler:    _FileHandling_FileSearch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileSearchStream",
			Handler:       _FileHandling_FileSearchStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "styxevent.proto",
}

func init() { proto.RegisterFile("styxevent.proto", fileDescriptor_styxevent_afca33e29db050af) }

var fileDescriptor_styxevent_afca33e29db050af = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x4f, 0x4e, 0xf3, 0x30,
	0x10, 0xc5, 0xe5, 0xaf, 0x7f, 0x3e, 0x32, 0x42, 0x50, 0x59, 0x15, 0x32, 0x15, 0x12, 0x28, 0xab,
	0xb2, 0x89, 0x10, 0xac, 0x59, 0xd0, 0x45, 0x81, 0x1d, 0xa2, 0x27, 0x30, 0xc9, 0x34, 0x35, 0x24,
	0x76, 0x34, 0x31, 0x55, 0x73, 0x03, 0x4e, 0xc0, 0x79, 0x91, 0x9d, 0x34, 0x86, 0x1d, 0xec, 0xfc,
	0x7b, 0x6f, 0xc6, 0xf3, 0x34, 0x03, 0xc7, 0xb5, 0x6d, 0x76, 0xb8, 0x45, 0x6d, 0x93, 0x8a, 0x8c,
	0x35, 0x3c, 0xea, 0x85, 0xf8, 0x1c, 0x06, 0x77, 0xe9, 0x1b, 0x17, 0xf0, 0xbf, 0xc4, 0xba, 0x96,
	0x39, 0x0a, 0x76, 0xc1, 0xe6, 0xd1, 0xf3, 0x1e, 0xe3, 0x0f, 0x06, 0x47, 0x2b, 0x94, 0x94, 0x6e,
	0x96, 0xaa, 0xc0, 0x47, 0xbd, 0x36, 0x7c, 0x02, 0x83, 0x57, 0x95, 0x75, 0x85, 0xee, 0xc9, 0x39,
	0x0c, 0x6d, 0x53, 0xa1, 0xf8, 0xe7, 0x25, 0xff, 0xe6, 0x33, 0x38, 0x58, 0xab, 0x02, 0xb5, 0x2c,
	0x51, 0x0c, 0xbc, 0xde, 0x33, 0x3f, 0x83, 0x28, 0x53, 0x84, 0xa9, 0x35, 0xd4, 0x88, 0xa1, 0x37,
	0x83, 0xc0, 0x4f, 0x60, 0x5c, 0x23, 0x6d, 0x91, 0xc4, 0xc8, 0x5b, 0x1d, 0xc5, 0x0d, 0x44, 0x4b,
	0xf3, 0xae, 0x33, 0x17, 0xe4, 0x97, 0x21, 0xa6, 0x30, 0x2a, 0xa5, 0x4d, 0x37, 0x5d, 0x82, 0x16,
	0x5c, 0x34, 0xc2, 0xbc, 0x35, 0xda, 0xe9, 0x3d, 0xbb, 0x0e, 0x24, 0x32, 0xfb, 0xd9, 0x2d, 0x5c,
	0x7f, 0x32, 0x38, 0x74, 0x63, 0x1f, 0xa4, 0xce, 0x0a, 0xa5, 0x73, 0x7e, 0x0b, 0xe0, 0xb8, 0xdd,
	0x0c, 0x3f, 0x4d, 0xc2, 0x8a, 0x7f, 0x2e, 0x6b, 0x36, 0xfd, 0x66, 0x85, 0xf4, 0xf7, 0x30, 0x09,
	0xed, 0x2b, 0x4b, 0x28, 0xcb, 0x3f, 0x7f, 0x32, 0x67, 0x57, 0x6c, 0x71, 0x09, 0x33, 0x65, 0x92,
	0x9c, 0xaa, 0x34, 0xc1, 0x9d, 0x2c, 0xab, 0x02, 0xeb, 0x50, 0xbb, 0x08, 0x87, 0x7e, 0x62, 0x2f,
	0x63, 0x7f, 0xfc, 0x9b, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xb5, 0x50, 0xba, 0x0f, 0x02,
	0x00, 0x00,
}
